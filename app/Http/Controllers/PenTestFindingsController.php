<?php

namespace App\Http\Controllers;

use App\Models\Asset;
use App\Models\AssetGroup;
use App\Models\Custodian;
use App\Models\Owner;
use App\Models\Patch;
use App\Models\PenTest;
use App\Models\PenTestFinding;
use App\Models\TempFile;
use App\Models\VAFindingAttachment;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;

class PenTestFindingsController extends Controller
{
    private $_routeName = "pen-test-findings";
    private $_primaryKey = "va_pt_finding_id";

    public function index(Request $request)
    {
        $findings = PenTestFinding::with('owner', 'penTest')->get();
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;

        return view('4-Process/PenTestFindings/index', compact('findings', 'routeName',  'primaryKey'));
    }

    public function show(PenTestFinding $penTestFinding)
    {
        $penTestFinding->load('penTest', 'owner', 'patches', 'assets', 'custodians', 'pocs', 'assetGroups');

        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;
        $data = $penTestFinding;

        return view('4-Process/PenTestFindings/show', compact('penTestFinding', 'routeName', 'data', 'primaryKey'));
    }

    public function create(PenTest $penTest)
    {
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;
        $owners = Owner::select('owner_name', 'owner_role_id')->get();
        $custodians = Custodian::select('custodian_role_id', 'custodian_role_title')->distinct()->get();
        $patches = Patch::select('patch_id', 'patch_name')->get();
        $assets = Asset::select('asset_id', 'asset_name')->get();
        $assetGroups = AssetGroup::select('asset_group_id', 'asset_group_name')->get();
        $statues = PenTestFinding::STATUSES;
        $severityLevels = PenTestFinding::SEVERITY_LEVELS;
        $penTestFinding = null;
        return view('4-Process/PenTestFindings/create', compact('penTest', 'penTestFinding', 'routeName', 'primaryKey', 'owners', 'patches', 'custodians', 'assets', 'assetGroups', 'statues', 'severityLevels'));
    }

    public function store(PenTest $penTest, Request $request)
    {
        $validator = Validator::make($request->all(), [
            'va_pt_finding_id' => ['required', 'unique:va_pt_test_findings_table'],
            'va_pt_finding_name' => 'required',
            'va_pt_discovery_date' => 'date|nullable',
            'va_pt_closing_date' => 'date|nullable',
            'va_pt_status' => 'required',
            'severity_level' => 'required',
            'owner_id' => 'required',
            'custodians' => 'nullable',
            'patches' => 'nullable',
            'assets' => 'nullable',
            'affected_systems' => 'nullable',
            'remediation_actions' => 'nullable',
            'cvss_score' => 'nullable',
            'cveid' => 'nullable',
            'impact_assessment' => 'nullable',
            'attack_path_analysis' => 'nullable',
            'va_pt_finding_description' => 'nullable', 
            'assetGroups' => 'nullable',
        ]);

        $tempFiles = TempFile::all();

        if ($validator->fails()) {
            foreach ($tempFiles as $tempFile) {
                Storage::deleteDirectory('files/tmp/' . $tempFile->folder);
                $tempFile->delete();
            }
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $validatedData = $validator->validated();

        $custodians = $validatedData['custodians'];
        unset($validatedData['custodians']);

        $patches = $validatedData['patches'];
        unset($validatedData['patches']);

        $assets = $validatedData['assets'];
        unset($validatedData['assets']); 

        $assetGroups = $validatedData['assetGroups'];
        unset($validatedData['assetGroups']);

        $finding = $penTest->findings()->create($validatedData);

        $this->_uploadAttachments($tempFiles, $finding->id);

        if ($custodians && $custodiansArray = json_decode($custodians, true)) {
            $finding->custodians()->attach($custodiansArray);
        }

        if ($patches && $patchesArray = json_decode($patches, true)) {
            $finding->patches()->attach($patchesArray);
        }

        if ($assets && $assetsArray = json_decode($assets, true)) {
            $finding->assets()->attach($assetsArray);
        }

        if ($assetGroups && $assetGroupsArray = json_decode($assetGroups, true)) {
            $finding->assetGroups()->attach($assetGroupsArray);
        }

        if ($request->input('submit') === 'exit') {
            return redirect(route('pen-test.index'));
        }

        return redirect()->back();

    }

    public function edit(PenTestFinding $penTestFinding)
    {
        $penTest = $penTestFinding->penTest;
        $owners = Owner::select('owner_name', 'owner_role_id')->get();
        $custodians = Custodian::select('custodian_role_id', 'custodian_role_title')->distinct()->get();
        $patches = Patch::select('patch_id', 'patch_name')->get();
        $assets = Asset::select('asset_id', 'asset_name')->get();
        $assetGroups = AssetGroup::select('asset_group_id', 'asset_group_name')->get();
        $statues = PenTestFinding::STATUSES;
        $severityLevels = PenTestFinding::SEVERITY_LEVELS;
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;
        $custodianRoleIds = $penTestFinding->custodians()->pluck('custodian_table.custodian_role_id')->toArray();
        $patchIds = $penTestFinding->patches()->pluck('patch_table.patch_id')->toArray();
        $assetIds = $penTestFinding->assets()->pluck('asset_register_table.asset_id')->toArray();
        $assetGroupIds = $penTestFinding->assetGroups()->pluck('asset_group_table.asset_group_id')->toArray();

        // return $penTestFinding;

        return view('4-Process/PenTestFindings/create', compact('penTestFinding', 'owners', 'custodians', 'patches', 'assets', 'assetGroups', 'statues', 'penTest', 'routeName', 'primaryKey', 'custodianRoleIds', 'patchIds', 'assetIds', 'severityLevels', 'assetGroupIds'));
    }

    public function update(PenTestFinding $penTestFinding, Request $request)
    {
        $validator = Validator::make($request->all(), [
            'va_pt_finding_id' => ['required', 'unique:va_pt_test_findings_table,va_pt_finding_id,' . $penTestFinding->id],
            'va_pt_finding_name' => 'required',
            'va_pt_discovery_date' => 'date|nullable',
            'va_pt_closing_date' => 'date|nullable',
            'va_pt_status' => 'required',
            'severity_level' => 'required',
            'owner_id' => 'required',
            'custodians' => 'nullable',
            'patches' => 'nullable',
            'assets' => 'nullable',
            'affected_systems' => 'nullable',
            'remediation_actions' => 'nullable',
            'cvss_score' => 'nullable',
            'cveid' => 'nullable',
            'impact_assessment' => 'nullable',
            'attack_path_analysis' => 'nullable',
            'va_pt_finding_description' => 'nullable',
            'assetGroups' => 'nullable',
        ]);

        $tempFiles = TempFile::all();

        if ($validator->fails()) {
            foreach ($tempFiles as $tempFile) {
                Storage::deleteDirectory('files/tmp/' . $tempFile->folder);
                $tempFile->delete();
            }
            return redirect()->back()->withErrors($validator)->withInput();
        }

        $validatedData = $validator->validated();


        $custodians = $validatedData['custodians'];
        unset($validatedData['custodians']);

        $patches = $validatedData['patches'];
        unset($validatedData['patches']);

        $assets = $validatedData['assets'];
        unset($validatedData['assets']);

        $assetGroups = $validatedData['assetGroups'];
        unset($validatedData['assetGroups']);

        $penTestFinding->update($validatedData);

        $this->_uploadAttachments($tempFiles, $penTestFinding->id);


        if ($custodians && $custodiansArray = json_decode($custodians, true)) {
            $penTestFinding->custodians()->sync($custodiansArray);
        }

        if ($patches && $patchesArray = json_decode($patches, true)) {
            $penTestFinding->patches()->sync($patchesArray);
        }

        if ($assets && $assetsArray = json_decode($assets, true)) {
            $penTestFinding->assets()->sync($assetsArray);
        }

        if ($assetGroups && $assetGroupsArray = json_decode($assetGroups, true)) {
            $penTestFinding->assetGroups()->sync($assetGroupsArray);
        }



        return redirect(route('pen-test.index'))
            ->with('success', 'Pen Test saved successfully.');
    }

    public function destroy(Request $request)
    {
        $attributes =  $request->validate([
            'record' => ['required'],
        ]);

        
        $finding = PenTestFinding::where('va_pt_finding_id', $attributes['record'])->first();

        $finding->custodians()->detach();
        $finding->patches()->detach();
        $finding->assets()->detach();
        $finding->pocs()->delete();
        $finding->delete();
        
        return redirect(route('pen-test.index'))
            ->with('success', 'Patch deleted successfully.');
    }

    public function uploadPoc(Request $request)
    {
        if ($request->hasFile('fileAttachment')) {
            $file       = $request->file('fileAttachment');
            $fileName   = $file->getClientOriginalName();
            $folder     = uniqid('poc-', true);
            $file->storeAs('files/tmp/' . $folder, $fileName);

            TempFile::create([
                'folder'    => $folder,
                'file'      => $fileName
            ]);

            return $fileName;
        }

        return '';
    }

    public function deleteTempPoc()
    {
        $tempFile = TempFile::where('file', request()->getContent())->first();

        if ($tempFile) {
            Storage::deleteDirectory('files/tmp/' . $tempFile->folder);
            $tempFile->delete();
        }

        // return response()->noContent();
    }

    public function deletePoc(VAFindingAttachment $attachment)
    {

        $folder = dirname($attachment->path);

        Storage::deleteDirectory("files/{$folder}");

        $attachment->delete();

        return redirect()->back();
    }

    private function _uploadAttachments($tempFiles, $findingId)
    {
        foreach ($tempFiles as $tempFile) {
            Storage::copy('files/tmp/' . $tempFile->folder . '/' . $tempFile->file, 'files/' . $tempFile->folder . '/' . $tempFile->file);

            VAFindingAttachment::create([
                'finding_id' => $findingId,
                'name' => $tempFile->file,
                'path' => $tempFile->folder . '/' . $tempFile->file
            ]);

            Storage::deleteDirectory('files/tmp/' . $tempFile->folder);
            $tempFile->delete();
        }
    }
}
