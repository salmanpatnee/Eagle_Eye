<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;
use Mpdf\Mpdf;

class VulnerabilityRegisterController extends Controller
{
    public function index()
    {
        $path = '4-Process/6-Vulnerabilities';
        $data = $this->getVulnerabilityRegisterData();

        if (request()->has('pdf')) {
            
            $this->generatePdf($path, $data, 'Vulnerability-Register.pdf');
        } else {
            return view("{$path}/register", compact('data'));
        }
        
    }

    private function generatePdf(string $path, Collection $report, string $reportName, string $templateName = "pdf")
    {
        // Increase PCRE backtrack limit
        ini_set("pcre.backtrack_limit", "5000000");

        $mpdf = new Mpdf([
            'orientation' => 'L',
            'margin_top' => 5,
            'margin_bottom' => 0,
            'margin_left' => 0,
            'margin_right' => 0,
        ]);

        // Get the HTML content
        $html = view("{$path}/{$templateName}", compact('report'))->render();

        // Split HTML into smaller chunks (e.g. 500KB each)
        $chunks = str_split($html, 500000);

        // Write HTML chunks separately
        foreach ($chunks as $chunk) {
            $mpdf->WriteHTML($chunk);
        }

        // Set the headers to prompt the file download
        return response($mpdf->Output($reportName, 'D'))
            ->header('Content-Type', 'application/pdf')
            ->header('Content-Disposition', 'attachment; filename="' . $reportName . '"');
    }
    
    private function getVulnerabilityRegisterData()
    {
        return DB::table('va_table as v')
            ->select([
                'v.va_id',
                'v.va_name',
                'v.va_master_description',
                'vf.cveid',
                'vf.cvss_score',
                DB::raw("GROUP_CONCAT(DISTINCT CONCAT('<a href=\"/asset-register-table/', a.asset_id, '\" style=\"color: black;\">', a.asset_id, ' - ', a.asset_name, '</a>') ORDER BY g.asset_group_id SEPARATOR '<br>') AS assets"),

                DB::raw("GROUP_CONCAT(DISTINCT CONCAT('<a href=\"/threat-agent-table/', t.threat_agent_id, '\" style=\"color: black;\">', t.threat_agent_id, ' - ', t.threat_agent_name, '</a>') ORDER BY t.threat_agent_id SEPARATOR '<br>') AS threat_agents"),

                't.threat_agent_description',
                'rp.risk_likelihood',
                'rp.risk_impact',
                'rp.risk_appetite_color',
                'o.owner_name',
                'o.owner_id',
                'vf.va_pt_status',
                DB::raw("DATE_FORMAT(vf.va_pt_discovery_date, '%Y-%m-%d') as discovery_date"),
                DB::raw("DATE_FORMAT(vf.va_pt_closing_date, '%Y-%m-%d') as due_date"),
                'vf.va_pt_finding_description'
            ])
            ->join('va_table_vs_risk_master_table as vvr', 'v.va_id', '=', 'vvr.va_id')
            ->join('risk_master_table as r', 'vvr.risk_id', '=', 'r.risk_id')
            ->join('risk_vs_asset_group_table as rva', 'r.risk_id', '=', 'rva.risk_id')
            ->join('asset_group_table as g', 'rva.asset_group_id', '=', 'g.asset_group_id')
            ->join('asset_register_table as a', 'g.asset_group_id', '=', 'a.asset_group_id')
            ->join(DB::raw("(
        SELECT vva.asset_id, vva.va_pt_finding_id FROM va_pt_test_table_vs_asset_table vva
        JOIN (
            SELECT vva2.asset_id, MAX(vptf.id) AS latest_finding_id
            FROM va_pt_test_table_vs_asset_table vva2
            JOIN va_pt_test_findings_table vptf ON vva2.va_pt_finding_id = vptf.va_pt_finding_id
            GROUP BY vva2.asset_id
        ) latest ON vva.asset_id = latest.asset_id
        JOIN va_pt_test_findings_table vptf ON vva.va_pt_finding_id = vptf.va_pt_finding_id AND vptf.id = latest.latest_finding_id
    ) as latest_vva"), 'a.asset_id', '=', 'latest_vva.asset_id')
            ->join('va_pt_test_findings_table as vf', 'latest_vva.va_pt_finding_id', '=', 'vf.va_pt_finding_id')
            ->join('risk_master_table_vs_threat_agent_table as rvt', 'r.risk_id', '=', 'rvt.risk_id')
            ->join('threat_agent_table as t', 'rvt.threat_agent_id', '=', 't.threat_agent_id')
            ->join('risk_inherent_table as ri', 'r.risk_inherent_id', '=', 'ri.risk_inherent_id')
            ->join('risk_appetite_table as rp', 'ri.risk_appetite_id', '=', 'rp.risk_appetite_id')
            ->join('owner_table as o', 'o.owner_role_id', '=', 'vf.owner_id')
            ->join('risk_assessment_details_table as rad', 'rad.risk_id', '=', 'r.risk_id')
            ->join('risk_assessment_master_table as ram', 'rad.risk_assessment_id', '=', 'ram.risk_assessment_id')
            ->groupBy([
                'v.va_id',
                'v.va_name',
                'v.va_master_description',
                'vf.cveid',
                'vf.cvss_score',
                't.threat_agent_description',
                'rp.risk_likelihood',
                'rp.risk_impact',
                'rp.risk_appetite_color',
                'o.owner_name',
                'o.owner_id',
                'vf.va_pt_status',
                'vf.va_pt_discovery_date',
                'vf.va_pt_closing_date',
                'vf.va_pt_finding_description',
            ])
            ->get();
    }
}
