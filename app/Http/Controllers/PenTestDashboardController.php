<?php

namespace App\Http\Controllers;

use App\Models\Auditor;
use App\Models\BestPractice;
use App\Models\Category;
use App\Models\Patch;
use App\Models\PenTest;
use App\Models\ThirdParty;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PenTestDashboardController extends Controller
{
    private $_routeName = "pen-test-dashboard";

    public function list()
    {
        $penTests = PenTest::select(
            'va_pt_test_id',
            'va_pt_test_name',
            'no_of_findings',
        )->selectRaw("CONCAT(DATE_FORMAT(va_pt_test_start_date, '%d %b %Y'), ' - ', DATE_FORMAT(va_pt_test_end_date, '%d %b %Y')) as start_end_date")
            ->get();
        $routeName = $this->_routeName;

        return view('4-Process/PenTestDashboard/index', compact('penTests', 'routeName'));
    }

    public function index(PenTest $penTest)
    {

        $vaPenTestStatus = DB::table('va_pt_test_table as va')
            ->join('va_pt_test_findings_table as vaf', 'va.va_pt_test_id', '=', 'vaf.va_pt_test_id')
            ->where('va.va_pt_test_id', $penTest->va_pt_test_id)
            ->selectRaw("
        SUM(CASE WHEN vaf.va_pt_status = 'Open - WIP' THEN 1 ELSE 0 END) as 'Open - WIP',
        SUM(CASE WHEN vaf.va_pt_status = 'Open - Not Started' THEN 1 ELSE 0 END) as 'Open - Not Started',
        SUM(CASE WHEN vaf.va_pt_status = 'Closed' THEN 1 ELSE 0 END) as 'Closed'
        ")->first();


        $severityStatus = PenTest::select(
            'no_of_findings',
            'critical_findings',
            'high_findings',
            'medium_findings',
            'low_findings'
        )
            ->where('va_pt_test_id', $penTest->va_pt_test_id)
            ->first();

        $vaPenTestId = $penTest->va_pt_test_id;
        $vaPenTestName = $penTest->va_pt_test_name;

        // return $severityStatus;

        return view('4-Process/PenTestDashboard/dashboard', compact('vaPenTestStatus', 'severityStatus', 'vaPenTestName', 'vaPenTestId'));
    }

    public function level(PenTest $penTest, string $level)
    {

        $findings = PenTest::where('va_pt_test_id', $penTest->va_pt_test_id)
            ->with(['findings' => function ($query) use ($level) {
                $query->where('severity_level', $level)
                    ->select('va_pt_finding_id', 'va_pt_finding_name', 'va_pt_status', 'va_pt_test_id');
            }])
            ->first();

        $findingsCount = DB::table('va_pt_test_table as va')
            ->join('va_pt_test_findings_table as vaf', 'va.va_pt_test_id', '=', 'vaf.va_pt_test_id')
            ->where('va.va_pt_test_id', $penTest->va_pt_test_id)
            ->where('vaf.severity_level', $level)
            ->selectRaw("
            COALESCE(SUM(CASE WHEN vaf.va_pt_status = 'Open - Not Started' THEN 1 ELSE 0 END), 0) as open_not_started,
                COALESCE(SUM(CASE WHEN vaf.va_pt_status = 'Open - WIP' THEN 1 ELSE 0 END), 0) as open_wip,
                COALESCE(SUM(CASE WHEN vaf.va_pt_status = 'Closed' THEN 1 ELSE 0 END), 0) as closed
                ")
            ->first();

        // return $findingsCount;
        $vaPenTestId = $penTest->va_pt_test_id;
        return view('4-Process/PenTestDashboard/level-dashboard', compact('findingsCount', 'vaPenTestId'));
    }

    public function levelStatus($id)
    {
        $status = request('status');
        $pastDue = request('pastDue') === 'true';

        $query = DB::table('va_pt_test_table as va')
            ->join('va_pt_test_findings_table as vaf', 'va.va_pt_test_id', '=', 'vaf.va_pt_test_id')
            ->join('owner_table as o', 'vaf.owner_id', '=', 'o.owner_role_id')
            ->leftJoin('va_pt_test_table_vs_custodian_role_table as vavc', 'vavc.va_pt_finding_id', '=', 'vaf.va_pt_finding_id')
            ->leftJoin('custodian_name_table as c', 'c.custodian_role_id', '=', 'vavc.custodian_id')
            ->where('va.va_pt_test_id', $id)
            ->where('vaf.va_pt_status', $status)
            ->when($pastDue, function ($query) {
                return $query->whereDate('vaf.va_pt_closing_date', '<', now());
            })
            ->select([
                'va.va_pt_test_id',
                'va.va_pt_test_name',
                'vaf.va_pt_finding_id',
                'vaf.va_pt_finding_name',
                'vaf.va_pt_status',
                'vaf.owner_id',
                'o.owner_name',
                DB::raw("DATE_FORMAT(vaf.va_pt_closing_date, '%d %b %Y') as va_pt_closing_date"),
                DB::raw('GROUP_CONCAT(DISTINCT CONCAT("<a href=\'/custodians/", c.custodian_name_id, "\' >", c.custodian_name_name, "</a>") SEPARATOR "<br>") as custodian_roles'),
            ])
            ->groupBy(
                'va.va_pt_test_id',
                'va.va_pt_test_name',
                'vaf.va_pt_finding_id',
                'vaf.va_pt_finding_name',
                'vaf.va_pt_status',
                'vaf.owner_id',
                'o.owner_name',
                'vaf.va_pt_closing_date',
            )
            ->get();

        if (request()->wantsJson()) {
            return response()->json($query);
        }
    }

    public function status(PenTest $penTest, string $status)
    {

        $counts = DB::table('va_pt_test_findings_table')
            ->select(
                DB::raw("SUM(CASE WHEN severity_level = 'Critical' THEN 1 ELSE 0 END) as Critical"),
                DB::raw("SUM(CASE WHEN severity_level = 'High' THEN 1 ELSE 0 END) as High"),
                DB::raw("SUM(CASE WHEN severity_level = 'Medium' THEN 1 ELSE 0 END) as Medium"),
                DB::raw("SUM(CASE WHEN severity_level = 'Low' THEN 1 ELSE 0 END) as Low")
            )
            ->where('va_pt_test_id', $penTest->va_pt_test_id)->where('va_pt_status', $status)
            ->first();



        $vaPenTestId = $penTest->va_pt_test_id;
        return view('4-Process/PenTestDashboard/status-dashboard', compact('counts', 'vaPenTestId', 'status'));
    }

    public function levelRecords(PenTest $penTest)
    {
        $level = request('level');
        $status = request('status');
        $pastDue = request('pastDue') === 'true';

        $results = DB::table('va_pt_test_table as va')
            ->join('va_pt_test_findings_table as vaf', 'va.va_pt_test_id', '=', 'vaf.va_pt_test_id')
            ->join('owner_table as o', 'vaf.owner_id', '=', 'o.owner_role_id')
            ->leftJoin('va_pt_test_table_vs_custodian_role_table as vavc', 'vavc.va_pt_finding_id', '=', 'vaf.va_pt_finding_id')
            ->leftJoin('custodian_name_table as c', 'c.custodian_role_id', '=', 'vavc.custodian_id')
            ->select([
                'va.va_pt_test_id',
                'va.va_pt_test_name',
                'vaf.va_pt_finding_id',
                'vaf.va_pt_finding_name',
                'vaf.va_pt_status',
                'vaf.owner_id',
                'o.owner_name',
                DB::raw("DATE_FORMAT(vaf.va_pt_closing_date, '%d %b %Y') as va_pt_closing_date"),
                DB::raw('GROUP_CONCAT(DISTINCT CONCAT("<a href=\'/custodians/", c.custodian_name_id, "\' >", c.custodian_name_name, "</a>") SEPARATOR "<br>") as custodian_roles'),
            ])
            ->where('va.va_pt_test_id', $penTest->va_pt_test_id)
            ->where('vaf.severity_level', $level)
            ->where('vaf.va_pt_status', $status)
            ->when($pastDue, function ($query) {
                return $query->whereDate('vaf.va_pt_closing_date', '<', now());
            })
            ->groupBy(
                'va.va_pt_test_id',
                'va.va_pt_test_name',
                'vaf.va_pt_finding_id',
                'vaf.va_pt_finding_name',
                'vaf.va_pt_status',
                'vaf.owner_id',
                'o.owner_name',
                'vaf.va_pt_closing_date',
            )
            ->get();

        if (request()->wantsJson()) {
            return response()->json($results);
        }
    }
}
