<?php

namespace App\Http\Controllers;

use App\Models\Asset;
use App\Models\PenTest;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Mpdf\Mpdf;

class PenTestReportController extends Controller
{
    /**
     * Display the PenTest report.
     *
     * This method loads the related findings and their proof of concepts (pocs)
     * for the given PenTest instance and returns the view for the PenTest report.
     *
     * @param  \App\Models\PenTest  $penTest  The PenTest instance for which the report is generated.
     * @return \Illuminate\View\View  The view displaying the PenTest report.
     */
    public function report(PenTest $penTest)
    {
        $path = "4-Process/PenTestReport";
        $penTest->load('findings.pocs');

        if (request()->has('pdf')) {
            $mpdf = new Mpdf([
                'orientation' => 'L',
                'format' => 'A4',
                'margin_left' => 15,
                'margin_right' => 15,
                'margin_top' => 15,
                'margin_bottom' => 15,
            ]);

            // Add CSS styles to prevent table breaking
            $stylesheet = '
                table { 
                    page-break-inside: avoid !important;
                    page-break-before: auto;
                }
            ';
            $mpdf->WriteHTML($stylesheet, \Mpdf\HTMLParserMode::HEADER_CSS);

            $html = view("{$path}/pdf", compact('penTest'))->render();
            $mpdf->WriteHTML($html);

            return response($mpdf->Output("VA-Pen-Test-Report.pdf", 'D'))
                ->header('Content-Type', 'application/pdf')
                ->header('Content-Disposition', 'attachment; filename="VA-Pen-Test-Report.pdf"');
        } else {

            return view("{$path}/index", compact('penTest'));
        }
    }

    public function assetVsRisk(Request $request)
    {
        $assetId = $request->input('asset_id');

        $assets = Asset::whereHas('findings')->get();
        $data = Asset::select('asset_id', 'asset_name', 'asset_group_id', 'asset_type_id')
            ->with(['findings.owner', 'findings.patches', 'findings.custodians', 'assetGroup', 'assetGroup.custodians', 'assetGroup.owner', 'assetType'])
            ->whereHas('findings') // Ensures only assets with findings are retrieved
            ->when($assetId, function($query) use ($assetId) {
                return $query->where('asset_id', $assetId);
            })
            ->get();

        
        return view("4-Process/PenTestReport/asset-vs-risk", compact('data', 'assets'));
    }
}
