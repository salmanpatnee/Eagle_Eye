<?php

namespace App\Http\Controllers;

use App\Models\Auditor;
use App\Models\BestPractice;
use App\Models\Category;
use App\Models\Patch;
use App\Models\PenTest;
use App\Models\ThirdParty;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PenTestController extends Controller
{
    private $_routeName = "pen-test";
    private $_primaryKey = "va_pt_test_id";

    public function index(Request $request)
    {
        $tests = PenTest::select(
            'va_pt_test_id',
            'va_pt_test_name'
        )->selectRaw("CONCAT(DATE_FORMAT(va_pt_test_start_date, '%d %b %Y'), ' - ', DATE_FORMAT(va_pt_test_end_date, '%d %b %Y')) as start_end_date")->get();
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;

        return view('4-Process/PenTest/index', compact('tests', 'routeName',  'primaryKey'));
    }

    public function show(PenTest $penTest)
    {
        $penTest->load('bestPractices');

        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;
        $data = $penTest;

        return view('4-Process/PenTest/show', compact('penTest', 'routeName', 'data', 'primaryKey'));
    }

    public function create()
    {

        $data = $penTest = null;
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;
        $bestPractices = BestPractice::select('id', 'best_practices_id', 'best_practices_name', 'sort_order')
            ->distinct()
            ->orderBy('sort_order')
            ->get();

        return view('4-Process/PenTest/create', compact('penTest', 'data', 'routeName', 'primaryKey', 'bestPractices'));
    }

    public function store(Request $request)
    {
        $attributes = $request->validate([
            'va_pt_test_id' => ['required', 'unique:va_pt_test_table'],
            'va_pt_test_name' => 'required',
            'va_pt_test_description' => 'nullable',
            'va_pt_test_start_date' => 'date|nullable',
            'va_pt_test_end_date' => 'date|nullable',
            'performed_by' => 'string|nullable',
            'no_of_findings' => 'numeric|nullable',
            'critical_findings' => 'numeric|nullable',
            'high_findings' => 'numeric|nullable',
            'medium_findings' => 'numeric|nullable',
            'low_findings' => 'numeric|nullable',
            'bestPractices' => 'nullable',
            'remarks' => 'nullable',
            'executive_summary' => 'nullable',
            'scope' => 'nullable',
            'engagement_rules' => 'nullable',
            'finding_summary' => 'nullable',
            'methodology' => 'nullable',
        ]);


        $bestPractices = $attributes['bestPractices'];
        unset($attributes['bestPractices']);

        $penTest = PenTest::create($attributes);

        if ($bestPractices && $bestPracticesArray = json_decode($bestPractices, true)) {
            $penTest->bestPractices()->attach($bestPracticesArray);
        }


        return redirect(route('pen-test-findings.create', $penTest->va_pt_test_id))
            ->with('success', 'Pen Test saved successfully.');
    }

    public function edit(PenTest $penTest)
    {
        $bestPractices = BestPractice::select('id', 'best_practices_id', 'best_practices_name', 'sort_order')
            ->distinct()
            ->orderBy('sort_order')
            ->get();
        $auditors = Auditor::select('id', 'auditor_id', DB::raw('CONCAT(auditor_first_name, " ", auditor_last_name) as auditor_name'))
            ->distinct()
            ->get();
        $bestPracticeIds = $penTest->bestPractices()->pluck('best_practice_table.best_practices_id')->toArray();

        $data = $penTest;
        $routeName = $this->_routeName;
        $primaryKey = $this->_primaryKey;

        return view('4-Process/PenTest/create', compact('penTest', 'data', 'routeName', 'primaryKey', 'auditors', 'bestPractices', 'bestPracticeIds'));
    }

    public function update(PenTest $penTest, Request $request)
    {
        $attributes = $request->validate([
            'va_pt_test_id' => ['required', 'unique:va_pt_test_table,va_pt_test_id,' . $penTest->id],
            'va_pt_test_name' => 'required',
            'va_pt_test_description' => 'nullable',
            'va_pt_test_start_date' => 'date|nullable',
            'va_pt_test_end_date' => 'date|nullable',
            'performed_by' => 'string|nullable',
            'no_of_findings' => 'numeric|nullable',
            'critical_findings' => 'numeric|nullable',
            'high_findings' => 'numeric|nullable',
            'medium_findings' => 'numeric|nullable',
            'low_findings' => 'numeric|nullable',
            'bestPractices' => 'nullable',
            'remarks' => 'nullable',
            'executive_summary' => 'nullable',
            'scope' => 'nullable',
            'engagement_rules' => 'nullable',
            'finding_summary' => 'nullable',
            'methodology' => 'nullable',
        ]);

        $bestPractices = $attributes['bestPractices'];
        unset($attributes['bestPractices']);

        $penTest->update($attributes);

        if ($bestPractices && $bestPracticesArray = json_decode($bestPractices, true)) {
            $penTest->bestPractices()->sync($bestPracticesArray);
        }


        return redirect(route('pen-test.index'))
            ->with('success', 'Pen Test saved successfully.');
    }

    public function destroy(Request $request)
    {
        $attributes =  $request->validate([
            'record' => ['required'],
        ]);


        $penTest = PenTest::where('id', $attributes['record'])->orWhere($this->_primaryKey, $attributes['record'])->first();

        if ($penTest->findings()->exists()) {

            foreach ($penTest->findings as $finding) {
                $finding->custodians()->detach();
                $finding->patches()->detach();
                $finding->assets()->detach();
                $finding->pocs()->delete();
                $finding->delete();
            }
        }


        $penTest->bestPractices()->detach();
        $penTest->delete();

        return redirect(route($this->_routeName . '.index'));
    }
}
